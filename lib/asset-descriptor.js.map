{"version":3,"file":"asset-descriptor.js","mappings":"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","sources":["webpack://assetDescriptor/webpack/universalModuleDefinition","webpack://assetDescriptor/external umd \"@stellar/stellar-base\"","webpack://assetDescriptor/webpack/bootstrap","webpack://assetDescriptor/webpack/runtime/define property getters","webpack://assetDescriptor/webpack/runtime/hasOwnProperty shorthand","webpack://assetDescriptor/./src/liquidity-pool-id.js","webpack://assetDescriptor/./src/validation.js","webpack://assetDescriptor/./src/asset-descriptor.js","webpack://assetDescriptor/./src/parser.js","webpack://assetDescriptor/./src/commonjs.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@stellar/stellar-base\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@stellar/stellar-base\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assetDescriptor\"] = factory(require(\"@stellar/stellar-base\"));\n\telse\n\t\troot[\"assetDescriptor\"] = factory(root[\"@stellar/stellar-base\"]);\n})(this, (__WEBPACK_EXTERNAL_MODULE__755__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__755__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import {Asset, LiquidityPoolAsset, LiquidityPoolFeeV18, getLiquidityPoolId} from '@stellar/stellar-base'\nimport {AssetDescriptor} from './asset-descriptor'\n\n/**\n * Generate constant product liquidity pool id from provided assets\n * @param {Array<String>|LiquidityPoolAsset} assetProps\n * @return {String}\n */\nexport function generateLiquidityPoolId(assetProps) {\n    const lp = assetProps instanceof Array ? getLiquidityPoolAsset(assetProps) : assetProps\n    if (lp === null)\n        return null //invalid pool\n    const id = getLiquidityPoolId('constant_product', lp.getLiquidityPoolParameters())\n    return id.toString('hex')\n}\n\n/**\n * Generate Stellar LiquidityPoolAsset for a given asset pair\n * @param {Array<String>} asset\n * @return {LiquidityPoolAsset}\n */\nexport function getLiquidityPoolAsset(asset) {\n    if (asset[0] === asset[1])\n        return null //invalid pool\n    const wrappedAssets = asset.map(a => AssetDescriptor.parse(a).toAsset())\n    wrappedAssets.sort(Asset.compare)\n    return new LiquidityPoolAsset(wrappedAssets[0], wrappedAssets[1], LiquidityPoolFeeV18)\n}","/**\n * Asset code validation\n * @param {String} code\n * @return {Boolean}\n */\nexport function isValidAssetCode(code) {\n    return typeof code === 'string' && /^[a-zA-Z0-9]{1,12}$/.test(code)\n}\n\n/**\n * Check whether a pool identifier is valid\n * @param {String|Uint8Array} poolId - Pool id to check\n * @return {Boolean}\n */\nexport function isValidPoolId(poolId) {\n    if (typeof poolId === 'string')\n        return /^\\w{64}$/.test(poolId)\n    if (poolId instanceof Uint8Array)\n        return poolId.length === 32\n    return false\n}\n\n/**\n * Lazy contract address format check\n * @param {String} address\n * @return {Boolean}\n */\nexport function isValidContract(address) {\n    return typeof address === 'string' && address.length === 56 && address[0] === 'C'\n}\n","import {StrKey, Asset} from '@stellar/stellar-base'\nimport {generateLiquidityPoolId} from './liquidity-pool-id'\nimport {isValidAssetCode, isValidContract, isValidPoolId} from './validation'\n\n/**\n * Stellar Asset definition.\n */\nexport class AssetDescriptor {\n    /**\n     * Creates an instance of the Asset\n     * @param {String|Asset|AssetDescriptor|{code:String,issuer:String}} code - Asset code or fully qualified asset name in CODE-ISSUER-TYPE format.\n     * @param {String} [issuer] - Asset issuer account public key.\n     * @param {String|Number} [type] - Asset type. One of ['credit_alphanum4', 'credit_alphanum12', 'native'].\n     */\n    constructor(code, issuer, type) {\n        if (this instanceof LiquidityPoolDescriptor || this instanceof ContractAssetDescriptor)\n            return\n        if (code instanceof AssetDescriptor) {\n            Object.assign(this, code)\n        } else if (typeof code === 'object' && !issuer) {\n            this.code = code.code\n            this.issuer = code.issuer\n            this.type = code.issuer ? normalizeType(this.code) : 0\n        } else if (issuer !== undefined) {\n            this.code = code\n            this.type = normalizeType(code, type)\n            this.issuer = issuer\n        } else if (((code === nativeAssetCode || code === 'native') && !type) || type === 0) {\n            this.type = 0\n            this.code = nativeAssetCode\n        } else {\n            if (!code || typeof code !== 'string' || code.length < 3)\n                throw new TypeError(`Invalid asset name: ${code}.`)\n            const separator = code.includes(':') ? ':' : '-'\n            const parts = code.split(separator)\n            if (parts.length < 2)\n                throw new TypeError(`Invalid asset name: ${code}.`)\n            this.code = parts[0]\n            this.issuer = parts[1]\n            this.type = normalizeType(this.code, parts[2])\n        }\n        if (this.type !== 0 && !StrKey.isValidEd25519PublicKey(this.issuer))\n            throw new Error('Invalid asset issuer address: ' + this.issuer)\n        if (!isValidAssetCode(this.code))\n            throw new Error('Invalid asset code: ' + this.code)\n        //if (!this.code || !/^[a-zA-Z0-9]{1,12}$/.test(this.code)) throw new Error(`Invalid asset code. See https://www.stellar.org/developers/guides/concepts/assets.html#alphanumeric-4-character-maximum`)\n        Object.freeze(this)\n    }\n\n    /**\n     * Asset type\n     * @type {Number}\n     * @readonly\n     */\n    type = 0\n\n    /**\n     * Check whether the asset is XLM\n     * @return {boolean}\n     */\n    get isNative() {\n        return this.type === 0\n    }\n\n    /**\n     * Check assets equality\n     * @param {AssetDescriptor} anotherAsset\n     * @return {Boolean}\n     */\n    equals(anotherAsset) {\n        if (!anotherAsset)\n            return false\n        return this.toString() === anotherAsset.toString()\n    }\n\n    /**\n     * Returns Asset name in a CODE-ISSUER format (compatible with StellarSDK).\n     * @returns {String}\n     */\n    toString() {\n        if (this.isNative)\n            return nativeAssetCode\n        return `${this.code}-${this.issuer}`\n    }\n\n    /**\n     * Returns a fully-qualified Asset unique name in a CODE-ISSUER-TYPE format.\n     * @returns {String}\n     */\n    toFQAN() {\n        if (this.isNative)\n            return nativeAssetCode\n        return `${this.code}-${this.issuer}-${this.type}`\n    }\n\n    /**\n     * Formats Asset as a currency with optional maximum length.\n     * @param issuerMaxLength {Number}\n     * @returns {String}\n     */\n    toCurrency(issuerMaxLength) {\n        if (this.isNative)\n            return 'XLM'\n        if (issuerMaxLength) {\n            let issuerAllowedLength = issuerMaxLength - 1,\n                shortenedIssuer = trim(this.issuer, issuerAllowedLength)\n\n            return `${this.code}-${shortenedIssuer}`\n        }\n        return this.code\n    }\n\n    /**\n     * JSON field converter\n     * @return {String}\n     */\n    toJSON() {\n        return this.toString()\n    }\n\n    /**\n     * @return {Asset}\n     */\n    toAsset() {\n        if (this.isNative)\n            return Asset.native()\n        return new Asset(this.code, this.issuer)\n    }\n\n    /**\n     * Native asset type.\n     * @returns {AssetDescriptor}\n     */\n    static get native() {\n        return new AssetDescriptor(nativeAssetCode)\n    }\n\n    /**\n     * Parse string or object as AssetDescriptor\n     * @param {String|{}} source\n     * @return {AssetDescriptor}\n     */\n    static parse(source) {\n        if (!source)\n            return null\n        if (source instanceof AssetDescriptor)\n            return source\n        if (isValidPoolId(source))\n            return new LiquidityPoolDescriptor(source)\n        if (isValidContract(source))\n            return new ContractAssetDescriptor(source)\n        if (source.getLiquidityPoolParameters)\n            return new LiquidityPoolDescriptor(generateLiquidityPoolId(source))\n        return new AssetDescriptor(source)\n    }\n}\n\nexport class LiquidityPoolDescriptor extends AssetDescriptor {\n    constructor(id) {\n        super()\n        this.poolId = id\n        this.poolType = 0\n        this.type = 3\n        Object.freeze(this)\n    }\n\n    /**\n     * Poll unique identifier (hash)\n     * @type {String}\n     * @readonly\n     */\n    poolId\n\n    /**\n     * Liquidity pool type\n     * @type {Number}\n     * @readonly\n     */\n    poolType\n\n    /**\n     * @inheritDoc\n     */\n    toString() {\n        return this.poolId\n    }\n\n    /**\n     * @inheritDoc\n     */\n    toFQAN() {\n        return this.poolId\n    }\n\n    /**\n     * @inheritDoc\n     */\n    toCurrency(maxLength = 8) {\n        if (this.code)\n            return this.code\n        if (maxLength < 56)\n            return trim(this.poolId, maxLength)\n        return this.poolId\n    }\n\n    /**\n     * @inheritDoc\n     */\n    toAsset() {\n        throw new TypeError(`Impossible to convert LiquidityPoolDescriptor to LiquidityPoolAsset`)\n    }\n}\n\nexport class ContractAssetDescriptor extends AssetDescriptor {\n    constructor(contractAddress) {\n        super()\n        if (!isValidContract(contractAddress))\n            throw new TypeError('Invalid asset contract: ' + contractAddress)\n        this.contract = contractAddress\n        this.type = 4\n        Object.freeze(this)\n    }\n\n    /**\n     * Contract address\n     * @type {String}\n     * @readonly\n     */\n    contract\n\n    get isContract() {\n        return true\n    }\n\n    /**\n     * @inheritDoc\n     */\n    toString() {\n        return this.contract\n    }\n\n    /**\n     * @inheritDoc\n     */\n    toFQAN() {\n        return this.contract\n    }\n\n    /**\n     * @inheritDoc\n     */\n    toCurrency(maxLength = 8) {\n        if (this.code)\n            return this.code\n        if (maxLength < 56)\n            return trim(this.contract, maxLength)\n        return this.contract\n    }\n\n    /**\n     * @inheritDoc\n     */\n    toAsset() {\n        throw new TypeError(`Impossible to convert ContractAssetDescriptor to LiquidityPoolAsset`)\n    }\n}\n\n/**\n * Check whether an asset descriptor or string representation is valid\n * @param {String|AssetDescriptor} asset - Asset to check\n * @return {Boolean}\n */\nexport function isAssetValid(asset) {\n    if (asset instanceof AssetDescriptor)\n        return true\n    if (isValidContract(asset) || isValidPoolId(asset))\n        return true\n    try {\n        new AssetDescriptor(asset)\n        return true\n    } catch (e) {\n        return false\n    }\n}\n\nconst nativeAssetCode = 'XLM'\n\nfunction normalizeType(code, type) {\n    switch (type) {\n        case 'credit_alphanum4':\n            return 1\n        case 'credit_alphanum12':\n            return 2\n        default: //autodetect type\n            return code.length > 4 ? 2 : 1\n    }\n}\n\nfunction trim(value, symbols) {\n    const affixLength = Math.max(2, Math.floor(symbols / 2))\n    return value.substring(0, affixLength) + '…' + value.substring(value.length - affixLength)\n}","import {AssetDescriptor, LiquidityPoolDescriptor} from './asset-descriptor'\n\n/**\n * Parse asset from Horizon API response\n * @param obj {Object} - Object that contains asset properties\n * @param prefix {String} - Optional field names prefix\n * @returns {AssetDescriptor}\n */\nexport function parseAssetFromObject(obj, prefix = '') {\n    const keyPrefix = prefix + 'asset'\n    if (obj[keyPrefix + '_type'] === 'liquidity_pool_shares')\n        return new LiquidityPoolDescriptor(obj.liquidity_pool_id)\n    if (obj[keyPrefix])  //new format\n        return new AssetDescriptor(obj[keyPrefix])\n    const type = obj[keyPrefix + '_type'],\n        code = obj[keyPrefix + '_code'],\n        issuer = obj[keyPrefix + '_issuer']\n    if (type === 'native' || !type && !issuer)\n        return AssetDescriptor.native\n    return new AssetDescriptor(code, issuer, type)\n}\n\n","import {AssetDescriptor, ContractAssetDescriptor, LiquidityPoolDescriptor, isAssetValid} from './asset-descriptor'\r\nimport {generateLiquidityPoolId, getLiquidityPoolAsset} from './liquidity-pool-id'\r\nimport {isValidAssetCode, isValidContract, isValidPoolId} from './validation'\r\nimport {parseAssetFromObject} from './parser'\r\n\r\nconst assetDescriptor = {\r\n    AssetDescriptor, ContractAssetDescriptor, LiquidityPoolDescriptor, isAssetValid,\r\n    generateLiquidityPoolId, getLiquidityPoolAsset,\r\n    isValidAssetCode, isValidContract, isValidPoolId,\r\n    parseAssetFromObject\r\n}\r\n\r\nexport default assetDescriptor"],"names":["Asset","LiquidityPoolAsset","LiquidityPoolFeeV18","getLiquidityPoolId","AssetDescriptor","generateLiquidityPoolId","assetProps","lp","Array","getLiquidityPoolAsset","id","getLiquidityPoolParameters","toString","asset","wrappedAssets","map","a","parse","toAsset","sort","compare","isValidAssetCode","code","test","isValidPoolId","poolId","Uint8Array","length","isValidContract","address","StrKey","constructor","issuer","type","LiquidityPoolDescriptor","ContractAssetDescriptor","Object","assign","normalizeType","undefined","nativeAssetCode","TypeError","separator","includes","parts","split","isValidEd25519PublicKey","Error","freeze","isNative","equals","anotherAsset","toFQAN","toCurrency","issuerMaxLength","issuerAllowedLength","shortenedIssuer","trim","toJSON","native","source","poolType","maxLength","contractAddress","contract","isContract","isAssetValid","e","value","symbols","affixLength","Math","max","floor","substring","parseAssetFromObject","obj","prefix","keyPrefix","liquidity_pool_id","assetDescriptor"],"sourceRoot":""}